{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create List Provider": {
        "prefix": "createlp",
        "body": [
          "class ${1:providerName} with ChangeNotifier {",
          "  /// services",
          "",
          "  /// values",
          "  List<${2:listType}> _${3:listValue} = [];",
          "  final int _pageSize = 10;",
          "  var _isLoading = true;",
          "  var _isError = false;",
          "  var _isSearch = false;",
          "  late StreamSubscription _subscription;",
          "",
          "  /// getters",
          "  ${1:providerName} get provider => this;",
          "  List<${2:listType}> get ${3:listValue} => [..._${3:listValue}];",
          "  bool get isLoading => _isLoading;",
          "  bool get isError => _isError;",
          "  bool get isSearch => _isSearch;",
          "",
          "  /// methods",
          "",
          "  /// dispose when the provider is destroyed, cancel the subscription",
          "  @override",
          "  void dispose() async {",
          "    super.dispose();",
          "    await _subscription.cancel();",
          "  }",
          "}"
        ],
        "description": "Create List Provider"
    },
    "Create Value Provider": {
        "prefix": "createvp",
        "body": [
          "class ${1:providerName} with ChangeNotifier {",
          "  /// services",
          "",
          "  /// values",
          "  late ${2:valueType}? _${3:valueName};",
          "  var _isLoading = true;",
          "  var _isError = false;",
          "  var _isFilter = false;",
          "  var _isSearch = false;",
          "  late StreamSubscription _subscription;",
          "",
          "  /// getters",
          "  ${1:providerName} get provider => this;",
          "  ${2:valueType}? get ${3:valueName} => _${3:valueName};",
          "  bool get isLoading => _isLoading;",
          "  bool get isError => _isError;",
          "  bool get isFilter => _isFilter;",
          "  bool get isSearch => _isSearch;",
          "",
          "  /// methods",
          "",
          "  /// dispose when the provider is destroyed, cancel the subscription",
          "  @override",
          "  void dispose() async {",
          "    super.dispose();",
          "    await _subscription.cancel();",
          "  }",
          "}"
        ],
        "description": "Create Value Provider"
    },
    "Provider Fetch List": {
        "prefix": "providerfl",
        "body": [
          " void fetch${1:whatToFetch}() {",
          "    // get original first batch",
          "    final stream = ${2:service}.fetch${1:whatToFetch}(_pageSize);",
          "    _subscription = stream.listen(",
          "      (${3:listName}) async {",
          "        // modify data if needed",
          "",
          "        // set data",
          "        _${3:listName} = ${3:listName};",
          "        _isLoading = false;",
          "        notifyListeners();",
          "      },",
          "      onError: (error) {",
          "        _isError = true;",
          "        _isLoading = false;",
          "        notifyListeners();",
          "      },",
          "      cancelOnError: true,",
          "    );",
          "}",
          "",
          "void refetch${1:whatToFetch}() async {",
          "    _isLoading = true;",
          "    _isError = false;",
          "    _isSearch = false;",
          "    notifyListeners();",
          "    fetch${1:whatToFetch}();",
          "}",
          "",
          "void fetchMore${1:whatToFetch}() async {",
          "    // only get called one time and not on error or in a search",
          "    // Aslo if no lastBook to start from, needs to return",
          "    if (_${3:listName}.isEmpty || _isError || _isSearch) {",
          "      return;",
          "    }",
          "    // get more data",
          "    List<${4:listType}> more${3:listName};",
          "    try {",
          "      more${3:listName} = await ${2:service}.fetchMore${1:whatToFetch}(_pageSize);",
          "    } catch (error) {",
          "      return;",
          "    }",
          "    // modify data    ",
          "",
          "    // add them the end of the messages list",
          "    _${3:listName}.addAll(moreBooks);",
          "    notifyListeners();",
          "}"
        ],
        "description": "Provider Fetch List"
    },
    "Provider Fetch Filtered List": {
        "prefix": "providerffl",
        "body": [
          " void fetch${1:whatToFetch}() {",
          "    // get original first batch",
          "    final stream = ${2:service}.fetch${1:whatToFetch}(_pageSize);",
          "    _subscription = stream.listen(",
          "      (${3:listName}) async {",
          "        // modify data if needed",
          "",
          "        // set data",
          "        _${3:listName} = ${3:listName};",
          "        _isLoading = false;",
          "        notifyListeners();",
          "      },",
          "      onError: (error) {",
          "        _isError = true;",
          "        _isLoading = false;",
          "        notifyListeners();",
          "      },",
          "      cancelOnError: true,",
          "    );",
          "}",
          "",
          "void refetch${1:whatToFetch}() async {",
          "    _isLoading = true;",
          "    _isError = false;",
          "    _isFilter = false",
          "    _isSearch = false;",
          "    notifyListeners();",
          "    fetch${1:whatToFetch}();",
          "}",
          "",
          "void fetchMore${1:whatToFetch}() async {",
          "    // only get called one time and not on error or in a search",
          "    // Aslo if no lastBook to start from, needs to return",
          "    if (_${3:listName}.isEmpty || _isError || _isSearch) {",
          "      return;",
          "    }",
          "    // get more data",
          "    List<${4:listType}> more${3:listName};",
          "    try {",
          "      if (dealFilter.isEmpty) {",
          "        more${3:listName} = await ${2:service}.fetchMore${1:whatToFetch}(_pageSize);",
          "      } else {",
          "        more${3:listName} = await ${2:service}.fetchMoreFiltered${1:whatToFetch}(pageSize: _pageSize);",
          "      }",
          "    } catch (error) {",
          "      return;",
          "    }",
          "    // modify data    ",
          "",
          "    // add them the end of the messages list",
          "    _${3:listName}.addAll(moreBooks);",
          "    notifyListeners();",
          "}",
          "",
          "Future<void> filter${1:whatToFetch}() async {",
          "    _isLoading = true;",
          "    _isFilter = true;",
          "    notifyListeners();",
          "    // filter deals",
          "    final _stream = ${2:service}.filter${1:whatToFetch}(pageSize: _pageSize);",
          "    await _subscription.cancel();",
          "    _subscription = _stream.listen((${3:listName}) {",
          "      _${3:listName} = ${3:listName};",
          "      //TODO save input data on filtering so it can be displayed",
          "",
          "      _isLoading = false;",
          "      notifyListeners();",
          "    }, onError: (error) {",
          "      _isError = true;",
          "      _isLoading = false;",
          "      notifyListeners();",
          "    }, cancelOnError: true);",
          "}",
          "",
          "void clearFilter() async {",
          "    _isLoading = true;",
          "    notifyListeners();",
          "    try {",
          "    await _subscription.cancel();",
          "    //TODO empty filter values",
          " ",
          "    _isFilter = false;",
          "    fetch${1:whatToFetch}();",
          "    } catch (error){",
          "      _isLoading = false;",
          "      _isError = true;",
          "      notifyListeners();",
          "    }",
          "}"
        ],
        "description": "Provider Fetch Filtered List"
    },
    "Provider Fetch Value": {
        "prefix": "providerfv",
        "body": [
          "void fetch${1:whatToFetch}(${2:parameters}) {",
          "    // fetch value",
          "    final stream = ${3:service}.fetch${1:whatToFetch}();",
          "    _subscription = stream.listen(",
          "      (${4:valueName}) {",
          "        _${4:valueName} = ${4:valueName};",
          "       // modify calue if needed",
          "",
          "        _isLoading = false;",
          "        notifyListeners();",
          "      },",
          "      onError: (error) {",
          "        _isError = true;",
          "        _isLoading = false;",
          "        notifyListeners();",
          "      },",
          "      cancelOnError: true,",
          "    );",
          "}",
          "",
          "void reFetch${1:whatToFetch}(${2:parameters}) async{",
          "    _isLoading = true;",
          "    _isError = false;",
          "    notifyListeners();",
          "    fetch${1:whatToFetch}();",
          "}"
        ],
        "description": "Provider Fetch Value"
    },
}